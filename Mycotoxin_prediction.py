# -*- coding: utf-8 -*-
"""Copy of Mycotoxin Prediction

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17jYl1fRhOtV5gUI8Sa8yQDJZhna_4MoB
"""

#upload csv file

from google.colab import files
uploaded = files.upload()

!pip install numpy pandas matplotlib seaborn scikit-learn tensorflow shap fastapi uvicorn optuna

#load dataset

import pandas as pd
df=pd.read_csv('MLE-Assignment.csv')
df.head()
print(df.info())
print(df.describe())

import seaborn as sns
import matplotlib.pyplot as plt

df.hist(figsize=(20,15), bins=30)
plt.show()

#line plot for spectral bands

plt.figure(figsize=(12, 6))
sns.lineplot(data=df.drop(['hsi_id','vomitoxin_ppb'],axis=1).mean())
plt.title('Average Spectral Reflectance')
plt.xlabel('Wavelength Bands')
plt.ylabel('Reflectance')
plt.show()

from sklearn.preprocessing import StandardScaler

numeric_cols=df.select_dtypes(include=['number']).columns
df=df[numeric_cols]

df=df.fillna(df.median())  #fill missing values

X=df.drop(['vomitoxin_ppb'], axis=1)
y=df['vomitoxin_ppb']
scaler=StandardScaler()
X_scaled=scaler.fit_transform(X)   #normaliz the data

#split the data

from sklearn.model_selection import train_test_split
X_train,X_test,y_train,y_test=train_test_split(X_scaled,y,test_size=0.2,random_state=42)

from sklearn.ensemble import RandomForestRegressor
import optuna
from sklearn.metrics import mean_squared_error

def objective(trial):
    n_estimators=trial.suggest_int('n_estimators',50,300)
    max_depth=trial.suggest_int('max_depth',5,30)
    model=RandomForestRegressor(n_estimators=n_estimators,max_depth=max_depth)
    model.fit(X_train,y_train)
    y_pred=model.predict(X_test)
    return mean_squared_error(y_test,y_pred)

study=optuna.create_study(direction='minimize')
study.optimize(objective,n_trials=20)

print("Best parameters:",study.best_params)
best_model=RandomForestRegressor(**study.best_params)
best_model.fit(X_train, y_train)

#Evaluate the model

import numpy as np
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score
y_pred=best_model.predict(X_test)

print(f"Mean Absolute Error(MAE):{mean_absolute_error(y_test,y_pred)}")
print(f"Root Mean Squared Error(RMSE):{np.sqrt(mean_squared_error(y_test,y_pred))}")
print(f"R2 Score:{r2_score(y_test,y_pred)}")

# Visualization
plt.figure(figsize=(8,8))
sns.scatterplot(x=y_test,y=y_pred)
plt.xlabel('Actual Vomitoxin Concentration(ppb)')
plt.ylabel('Predicted Vomitoxin Concentration(ppb)')
plt.title('Actual vs Predicted Vomitoxin Concentration')
plt.show()

#Model explainability with SHAP

import shap
explainer=shap.Explainer(best_model, X_train)
shap_values=explainer(X_train)

shap.summary_plot(shap_values, X_train)

import joblib

joblib.dump(best_model,'mycotoxin_model.pkl')
from google.colab import drive
drive.mount('/content/drive')
!cp mycotoxin_model.pkl /content/drive/MyDrive/